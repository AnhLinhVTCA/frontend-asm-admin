{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as type from \"../constants/actionTypes\";\nimport * as action from \"../actions\";\nimport { getListProducts, getProductDetail, getUser, getListCategories, updateProductAPI, deleteProductAPI, insertProductAPI } from \"../api\";\n\nfunction* fetchProduct() {\n  try {\n    const {\n      data\n    } = yield call(getListProducts);\n    yield put(action.showListProducts(data));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* insertProduct({\n  data\n}) {\n  try {\n    yield call(insertProductAPI, data);\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* updateProduct({\n  data\n}) {\n  try {\n    yield call(updateProductAPI, data);\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* deleteProduct({\n  _id\n}) {\n  try {\n    yield call(deleteProductAPI, _id);\n    yield put(action.listProducts());\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* fetchCategory() {\n  try {\n    const {\n      data\n    } = yield call(getListCategories);\n    yield put(action.listCategories(data));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* fetchProductDetail({\n  id\n}) {\n  try {\n    if (!id) throw new Error(\"ID invalid!\");\n    const {\n      data\n    } = yield call(getProductDetail, id);\n    yield put(action.getProductDetail(null, data));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* userLogin({\n  state\n}) {\n  try {\n    if (state.email === \"\" || state.password === \"\" || state.password.length < 4) throw new Error(\"Invalid Email or Password!\");\n    const {\n      data\n    } = yield call(getUser, state);\n    yield put(action.getUserLogin(data));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(type.GET_LIST_PRODUCTS, fetchProduct);\n  yield takeLatest(type.GET_PRODUCT_DETAIL, fetchProductDetail);\n  yield takeLatest(type.USER_LOGIN, userLogin);\n  yield takeLatest(type.GET_LIST_CATEGORY, fetchCategory);\n  yield takeLatest(type.UPDATE_PRODUCT, updateProduct);\n  yield takeLatest(type.DELETE_PRODUCT, deleteProduct);\n  yield takeLatest(type.INSERT_PRODUCT, insertProduct);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/linhnguyen/Documents/document/Sem3/ReactJS/asm/frontend-asm-admin/src/sagas/index.js"],"names":["call","put","takeLatest","type","action","getListProducts","getProductDetail","getUser","getListCategories","updateProductAPI","deleteProductAPI","insertProductAPI","fetchProduct","data","showListProducts","error","message","insertProduct","updateProduct","deleteProduct","_id","listProducts","fetchCategory","listCategories","fetchProductDetail","id","Error","userLogin","state","email","password","length","getUserLogin","rootSaga","GET_LIST_PRODUCTS","GET_PRODUCT_DETAIL","USER_LOGIN","GET_LIST_CATEGORY","UPDATE_PRODUCT","DELETE_PRODUCT","INSERT_PRODUCT"],"mappings":"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","sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as type from \"../constants/actionTypes\";\nimport * as action from \"../actions\";\nimport { getListProducts, getProductDetail, getUser, getListCategories, updateProductAPI, deleteProductAPI, insertProductAPI } from \"../api\";\n\nfunction* fetchProduct() {\n  try {\n    const { data } = yield call(getListProducts);\n    yield put(action.showListProducts(data));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* insertProduct({ data }) {\n  try {\n    yield call(insertProductAPI, data);\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* updateProduct({ data }) {\n  try {\n    yield call(updateProductAPI, data);\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* deleteProduct({ _id }) {\n  try {\n    yield call(deleteProductAPI, _id);\n    yield put(action.listProducts());\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* fetchCategory() {\n  try {\n    const { data } = yield call(getListCategories);\n    yield put(action.listCategories(data));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* fetchProductDetail({ id }) {\n  try {\n    if (!id) throw new Error(\"ID invalid!\");\n    const { data } = yield call(getProductDetail, id);\n    yield put(action.getProductDetail(null, data));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\n\nfunction* userLogin({ state }) {\n  try {\n    if (state.email === \"\" || state.password === \"\" || state.password.length < 4) throw new Error(\"Invalid Email or Password!\");\n    const { data } = yield call(getUser, state);\n    yield put(action.getUserLogin(data));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(type.GET_LIST_PRODUCTS, fetchProduct);\n  yield takeLatest(type.GET_PRODUCT_DETAIL, fetchProductDetail);\n  yield takeLatest(type.USER_LOGIN, userLogin);\n  yield takeLatest(type.GET_LIST_CATEGORY, fetchCategory);\n  yield takeLatest(type.UPDATE_PRODUCT, updateProduct);\n  yield takeLatest(type.DELETE_PRODUCT, deleteProduct);\n  yield takeLatest(type.INSERT_PRODUCT, insertProduct);\n}\n\nexport default rootSaga;"]},"metadata":{},"sourceType":"module"}