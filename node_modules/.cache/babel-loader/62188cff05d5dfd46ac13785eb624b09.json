{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as type from \"../constants/actionTypes\";\nimport * as action from \"../actions\";\nimport { getListProducts, getProductDetail, getUser } from \"../api\";\n\nfunction* fetchProduct() {\n  try {\n    const {\n      data\n    } = yield call(getListProducts);\n    yield put(action.showListProducts(data));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* fetchProductDetail({\n  id\n}) {\n  try {\n    if (!id) throw new Error(\"ID invalid!\");\n    const {\n      data\n    } = yield call(getProductDetail, id);\n    yield put(action.getProductDetail(null, data));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* addToCart({\n  data\n}) {\n  try {\n    if (!data) throw new Error(\"Data not null!\");\n    let dataIntoCart = JSON.parse(localStorage.getItem('cart')) || [];\n\n    if (dataIntoCart.length > 0) {\n      if (isArray(data)) {\n        dataIntoCart = data;\n      } else {\n        for (const item of dataIntoCart) {\n          if (item.id === data.id && item.color === data.color && item.size === data.size) {\n            item.quantity += data.quantity;\n            return localStorage.setItem('cart', JSON.stringify(dataIntoCart));\n          }\n        }\n\n        dataIntoCart.push(data);\n      }\n    } else {\n      dataIntoCart.push(data);\n    }\n\n    localStorage.setItem('cart', JSON.stringify(dataIntoCart));\n    const listProduct = [];\n\n    for (const item of dataIntoCart) {\n      const {\n        data\n      } = yield call(getProductDetail, item.id);\n      listProduct.push({\n        id: data._id,\n        name: data.productName,\n        price: data.price,\n        quantity: item.quantity,\n        image: data.imagePath[0]\n      });\n    }\n\n    yield put(action.showProductToCart(listProduct));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* getProductIntoCart() {\n  try {\n    const data = JSON.parse(localStorage.getItem('cart'));\n    if (!data) throw new Error(\"Data not null\");\n    const listProduct = [];\n\n    for (const item of data) {\n      const {\n        data\n      } = yield call(getProductDetail, item.id);\n      listProduct.push({\n        id: data._id,\n        name: data.productName,\n        price: data.price,\n        quantity: item.quantity,\n        image: data.imagePath[0]\n      });\n    }\n\n    yield put(action.showProductToCart(listProduct));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* userLogin({\n  state\n}) {\n  try {\n    if (state.email === \"\" || state.password === \"\" || state.password.length < 4) throw new Error(\"Invalid Email or Password!\");\n    const {\n      data\n    } = yield call(getUser, state);\n    yield put(action.getUserLogin(data));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(type.GET_LIST_PRODUCTS, fetchProduct);\n  yield takeLatest(type.GET_PRODUCT_DETAIL, fetchProductDetail);\n  yield takeLatest(type.ADD_TO_CART, addToCart);\n  yield takeLatest(type.GET_PRODUCT_TO_CART, getProductIntoCart);\n  yield takeLatest(type.USER_LOGIN, userLogin);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/linhnguyen/Documents/document/Sem3/ReactJS/asm/frontend-asm-admin/src/sagas/index.js"],"names":["call","put","takeLatest","type","action","getListProducts","getProductDetail","getUser","fetchProduct","data","showListProducts","error","message","fetchProductDetail","id","Error","addToCart","dataIntoCart","JSON","parse","localStorage","getItem","length","isArray","item","color","size","quantity","setItem","stringify","push","listProduct","_id","name","productName","price","image","imagePath","showProductToCart","getProductIntoCart","userLogin","state","email","password","getUserLogin","rootSaga","GET_LIST_PRODUCTS","GET_PRODUCT_DETAIL","ADD_TO_CART","GET_PRODUCT_TO_CART","USER_LOGIN"],"mappings":"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","sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as type from \"../constants/actionTypes\";\nimport * as action from \"../actions\";\nimport { getListProducts, getProductDetail, getUser } from \"../api\";\nfunction* fetchProduct() {\n  try {\n    const { data } = yield call(getListProducts);\n    yield put(action.showListProducts(data));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* fetchProductDetail({ id }) {\n  try {\n    if (!id) throw new Error(\"ID invalid!\");\n    const { data } = yield call(getProductDetail, id);\n    yield put(action.getProductDetail(null, data));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* addToCart({ data }) {\n  try {\n    if (!data) throw new Error(\"Data not null!\");\n    let dataIntoCart = JSON.parse(localStorage.getItem('cart')) || [];\n    if (dataIntoCart.length > 0) {\n      if (isArray(data)) {\n        dataIntoCart = data;\n      }\n      else {\n        for (const item of dataIntoCart) {\n          if (item.id === data.id && item.color === data.color && item.size === data.size) {\n            item.quantity += data.quantity;\n            return localStorage.setItem('cart', JSON.stringify(dataIntoCart));\n          }\n        }\n        dataIntoCart.push(data);\n      }\n    }\n    else {\n      dataIntoCart.push(data);\n    }\n    localStorage.setItem('cart', JSON.stringify(dataIntoCart));\n    const listProduct = [];\n    for (const item of dataIntoCart) {\n      const { data } = yield call(getProductDetail, item.id);\n      listProduct.push({ id: data._id, name: data.productName, price: data.price, quantity: item.quantity, image: data.imagePath[0] })\n    }\n    yield put(action.showProductToCart(listProduct));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* getProductIntoCart() {\n  try {\n    const data = JSON.parse(localStorage.getItem('cart'))\n    if (!data) throw new Error(\"Data not null\");\n    const listProduct = [];\n    for (const item of data) {\n      const { data } = yield call(getProductDetail, item.id);\n      listProduct.push({ id: data._id, name: data.productName, price: data.price, quantity: item.quantity, image: data.imagePath[0] })\n    }\n    yield put(action.showProductToCart(listProduct));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* userLogin({ state }) {\n  try {\n    if (state.email === \"\" || state.password === \"\" || state.password.length < 4) throw new Error(\"Invalid Email or Password!\");\n    const { data } = yield call(getUser, state);\n    yield put(action.getUserLogin(data));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(type.GET_LIST_PRODUCTS, fetchProduct);\n  yield takeLatest(type.GET_PRODUCT_DETAIL, fetchProductDetail);\n  yield takeLatest(type.ADD_TO_CART, addToCart);\n  yield takeLatest(type.GET_PRODUCT_TO_CART, getProductIntoCart);\n  yield takeLatest(type.USER_LOGIN, userLogin);\n}\n\nexport default rootSaga;"]},"metadata":{},"sourceType":"module"}