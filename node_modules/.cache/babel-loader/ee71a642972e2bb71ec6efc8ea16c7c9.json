{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as type from \"../constants/actionTypes\";\nimport * as action from \"../actions\";\nimport { getListProducts, getProductDetail, getUser, getListCategories } from \"../api\";\n\nfunction* fetchProduct() {\n  try {\n    const {\n      data\n    } = yield call(getListProducts);\n    yield put(action.showListProducts(data));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* updateProduct({\n  data\n}) {\n  try {\n    const {\n      data\n    } = yield call(updateProduct, data);\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* fetchCategory() {\n  try {\n    const {\n      data\n    } = yield call(getListCategories);\n    yield put(action.listCategories(data));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* fetchProductDetail({\n  id\n}) {\n  try {\n    if (!id) throw new Error(\"ID invalid!\");\n    const {\n      data\n    } = yield call(getProductDetail, id);\n    yield put(action.getProductDetail(null, data));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* userLogin({\n  state\n}) {\n  try {\n    if (state.email === \"\" || state.password === \"\" || state.password.length < 4) throw new Error(\"Invalid Email or Password!\");\n    const {\n      data\n    } = yield call(getUser, state);\n    yield put(action.getUserLogin(data));\n  } catch (error) {\n    yield error.message;\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(type.GET_LIST_PRODUCTS, fetchProduct);\n  yield takeLatest(type.GET_PRODUCT_DETAIL, fetchProductDetail);\n  yield takeLatest(type.USER_LOGIN, userLogin);\n  yield takeLatest(type.GET_LIST_CATEGORY, fetchCategory);\n  yield takeLatest(type.UPDATE_PRODUCT, updateProduct);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/linhnguyen/Documents/document/Sem3/ReactJS/asm/frontend-asm-admin/src/sagas/index.js"],"names":["call","put","takeLatest","type","action","getListProducts","getProductDetail","getUser","getListCategories","fetchProduct","data","showListProducts","error","message","updateProduct","fetchCategory","listCategories","fetchProductDetail","id","Error","userLogin","state","email","password","length","getUserLogin","rootSaga","GET_LIST_PRODUCTS","GET_PRODUCT_DETAIL","USER_LOGIN","GET_LIST_CATEGORY","UPDATE_PRODUCT"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,OAAO,KAAKC,IAAZ,MAAsB,0BAAtB;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AACA,SAASC,eAAT,EAA0BC,gBAA1B,EAA4CC,OAA5C,EAAqDC,iBAArD,QAA8E,QAA9E;;AAEA,UAAUC,YAAV,GAAyB;AACvB,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMV,IAAI,CAACK,eAAD,CAA3B;AACA,UAAMJ,GAAG,CAACG,MAAM,CAACO,gBAAP,CAAwBD,IAAxB,CAAD,CAAT;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAOA,KAAK,CAACC,OAAb;AACD;AACF;;AAED,UAAUC,aAAV,CAAwB;AAAEJ,EAAAA;AAAF,CAAxB,EAAkC;AAChC,MAAI;AACF,UAAM;AAAEA,MAAAA;AAAF,QAAW,MAAMV,IAAI,CAACc,aAAD,EAAgBJ,IAAhB,CAA3B;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,UAAOA,KAAK,CAACC,OAAb;AACD;AACF;;AAED,UAAUE,aAAV,GAA0B;AACxB,MAAI;AACF,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMV,IAAI,CAACQ,iBAAD,CAA3B;AACA,UAAMP,GAAG,CAACG,MAAM,CAACY,cAAP,CAAsBN,IAAtB,CAAD,CAAT;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAOA,KAAK,CAACC,OAAb;AACD;AACF;;AAED,UAAUI,kBAAV,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAAqC;AACnC,MAAI;AACF,QAAI,CAACA,EAAL,EAAS,MAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AACT,UAAM;AAAET,MAAAA;AAAF,QAAW,MAAMV,IAAI,CAACM,gBAAD,EAAmBY,EAAnB,CAA3B;AACA,UAAMjB,GAAG,CAACG,MAAM,CAACE,gBAAP,CAAwB,IAAxB,EAA8BI,IAA9B,CAAD,CAAT;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACd,UAAOA,KAAK,CAACC,OAAb;AACD;AACF;;AAGD,UAAUO,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA+B;AAC7B,MAAI;AACF,QAAIA,KAAK,CAACC,KAAN,KAAgB,EAAhB,IAAsBD,KAAK,CAACE,QAAN,KAAmB,EAAzC,IAA+CF,KAAK,CAACE,QAAN,CAAeC,MAAf,GAAwB,CAA3E,EAA8E,MAAM,IAAIL,KAAJ,CAAU,4BAAV,CAAN;AAC9E,UAAM;AAAET,MAAAA;AAAF,QAAW,MAAMV,IAAI,CAACO,OAAD,EAAUc,KAAV,CAA3B;AACA,UAAMpB,GAAG,CAACG,MAAM,CAACqB,YAAP,CAAoBf,IAApB,CAAD,CAAT;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACd,UAAOA,KAAK,CAACC,OAAb;AACD;AACF;;AAED,UAAUa,QAAV,GAAqB;AACnB,QAAMxB,UAAU,CAACC,IAAI,CAACwB,iBAAN,EAAyBlB,YAAzB,CAAhB;AACA,QAAMP,UAAU,CAACC,IAAI,CAACyB,kBAAN,EAA0BX,kBAA1B,CAAhB;AACA,QAAMf,UAAU,CAACC,IAAI,CAAC0B,UAAN,EAAkBT,SAAlB,CAAhB;AACA,QAAMlB,UAAU,CAACC,IAAI,CAAC2B,iBAAN,EAAyBf,aAAzB,CAAhB;AACA,QAAMb,UAAU,CAACC,IAAI,CAAC4B,cAAN,EAAsBjB,aAAtB,CAAhB;AACD;;AAED,eAAeY,QAAf","sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport * as type from \"../constants/actionTypes\";\nimport * as action from \"../actions\";\nimport { getListProducts, getProductDetail, getUser, getListCategories } from \"../api\";\n\nfunction* fetchProduct() {\n  try {\n    const { data } = yield call(getListProducts);\n    yield put(action.showListProducts(data));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* updateProduct({ data }) {\n  try {\n    const { data } = yield call(updateProduct, data);\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* fetchCategory() {\n  try {\n    const { data } = yield call(getListCategories);\n    yield put(action.listCategories(data));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* fetchProductDetail({ id }) {\n  try {\n    if (!id) throw new Error(\"ID invalid!\");\n    const { data } = yield call(getProductDetail, id);\n    yield put(action.getProductDetail(null, data));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\n\nfunction* userLogin({ state }) {\n  try {\n    if (state.email === \"\" || state.password === \"\" || state.password.length < 4) throw new Error(\"Invalid Email or Password!\");\n    const { data } = yield call(getUser, state);\n    yield put(action.getUserLogin(data));\n  } catch (error) {\n    yield (error.message);\n  }\n}\n\nfunction* rootSaga() {\n  yield takeLatest(type.GET_LIST_PRODUCTS, fetchProduct);\n  yield takeLatest(type.GET_PRODUCT_DETAIL, fetchProductDetail);\n  yield takeLatest(type.USER_LOGIN, userLogin);\n  yield takeLatest(type.GET_LIST_CATEGORY, fetchCategory);\n  yield takeLatest(type.UPDATE_PRODUCT, updateProduct);\n}\n\nexport default rootSaga;"]},"metadata":{},"sourceType":"module"}